
## 목차 ##
- 코드가 존재하리라
- 나쁜 코드
- 나쁜 코드로 치르는 대가
  - 원대한 재설계의 꿈
  - 태도
  - 원초의 난제
  - 깨끗한 코드라는 예술?
  - 깨끗한 코드란?
- 우리는 저자다
- 보이스카우트 규칙

---
## 코드가 존재하리라
- 코드를 다루는 책이 시대에 뒤떨어지고, 요구사항을 기준으로 코드를 자동으로 생성하는 시대가 올 것이란 얘기가 있지만, **틀렸다.**
- 요구사항을 모호하게 줘도 기계가 의도를 정확하게 파악하여 프로그램을 완벽하게 짜주는 것은 불가능하다.
- 코드는 요구사항을 표현하는 언어이기 때문이다. 정밀한 표현은 도구만으로 할 수 없다.

## 나쁜 코드
- 80년대 후반, Killer App 하나로 대박난 회사가 머지 않아 망한 일이 있었다. 원인은 나쁜 코드.
- 데드라인에 맞추기 위해 나쁜 코드를 짜고, '나중에 다시 돌아와 정리해야지' 라고 생각한 경험이 다들 있을 것이다.
  - 르블랑의 법칙 : "나중은 결코 오지 않는다." 
## 나쁜 코드로 치르는 대가
- 나쁜 코드는 프로젝트 초반 개발을 빠를 지 모르나, 나중에 개발 속도를 크게 떨어뜨린다.
- 나쁜 코드가 많을수록 팀 생산성은 떨어지고, 결국 0에 수렴한다.
    ```
    관리팀이 인력을 추가로 투입한다.
    하지만, 새 인력은 기존 구조를 이해하는데 쉽지 않다.
    새 인력과 팀은 생산성을 높여야 한다는 압박에 시달린다.
    결과적으로, 나쁜 코드를 더 생산한다.
    ```
- 원대한 재설계의 꿈
    ```
    마침내 팀이 반기를 든다. 재설계를 요구한다.
    달갑지는 않지만 관리층 또한 생산성이 바닥이라는 것을 알고 있으므로 허가한다.
    새 tiger team이 구성되고, 기존의 프로덕트의 스펙 + 변경사항 적용을 맡게된다. 기존의 팀원들은 기존의 코드를 유지보수하게 된다.
    두 팀이 오랫동안 경쟁한다.
    tiger team이 기존 시스템을 따라잡을 즈음, tiger team의 초기 멤버들은 대부분 새 맴버들로 교체되어 있다.
    그리고 그들은 다시 재설계를 요구한다.
    ```
    > 깨끗한 코드를 만들려는 노력은 비용을 절감시키고, 전문가로서 살아남도록 만든다.
    
- 태도
  - 몇 시간으로 예상한 업무가 몇 주로 늘어지거나, 한 줄만 고치면 되리라 예상했다가 모듈을 수백 개 건드리는 경험은 흔하다.
    - 왜 좋은 코드가 어느 순간에 나쁜 코드로 전략해버리는가?
  - 요구사항 변경, 촉박한 일정, 멍청한 매니저, 조급한 고객, 쓸데없는 마케팅 부서 사람을 욕할지 모른다. 하지만 그것은 우리 잘못이다.
    - 매니저, 마케팅 사람은 개발자에게 정보를 구한다. 구하지 않는다면 적극적으로 정보를 제공해야 마땅하다.
    - 사용자는 요구사항을 내놓으며 현실성을 자문한다.
    - 우리도 프로젝트 계획 과정에 깊숙히 관여한다.
    - 결국, 좋은 코드를 사수하는 것은 우리 프로그래머들의 책임이다.
- 원초의 난제
  - 기한을 맞추려면 나쁜 코드를 만들어낼 수 밖에 없다고 말한다
  - 하지만 더러운 코드는 생산성을 곧바로 낮춘다. 기한도 놓치게 한다.
  - 기한을 맞추는 유일한 방법은 언제나 코드를 깔끔하게 유지하는 습관이다.
- 깨끗한 코드라는 예술?
  - 깨끗한 코드란 무엇인지 아는 것이 중요하다. 이것을 작성할 줄 아는 것은 다른 문제다.
  - 깨끗한 코드를 작성하려면 '청결(표준화)'이라는 힘겹게 얻은 감각을 사용해 무수하게 많은 작은 기술들을 적용해야 한다.
- 깨끗한 코드란?
    - 비야네 스트롭스트룹(C++ 창시자이자 'The C++ Programming Language' 저자)
      - 우아하고(잘 읽히고) 효율적이여야 한다.
      - 논리가 간단해야 한다. 그래야 버그가 숨어들지 못한다.
      - 의존성을 최대한 줄여야 한다. 그래야 유지보수가 쉬워진다.
      - 오류는 철저하게 처리한다. (메모리 누수, race condition, 일관성 없는 명명법 등)
      - 원칙 없는 최적화의 유혹에 빠지지 마라.
      - **깨끗한 코드는 한 가지 일을 잘 한다.**
    - 그래디 부치('Object Oriented Analysis and Design with Application' 저자)
      - 클린 코드는 잘 쓴 문장처럼 읽힌다. (가독성)
      - 깨끗한 코드는 소설의 기승전결처럼 문제를 제시하고 명쾌한 해답을 제시해야 한다.
      - 명쾌한 추상화. 코드는 추측이 아니라 사실에 기반해야 하고, 반드시 필요한 내용만 담는다.
    - 데이브 토마스(OTI 창립자이자 이클립스 전략의 대부)
      - 클린 코드는 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다.
      - 유닛 테스트 케이스와 파라미터 테스트 케이스가 존재한다. (Test Driven Development)
      - 코드는 간결할 수록 좋다.
      - 코드는 문학적으로 읽혀야 한다. (인간이 읽기 좋은 코드)
    - 마이클 페더스('Working Effectively with Legacy Code' 저자)
      - 코드를 주의 깊게 작성하라.
    - 론 제프리스('Extreme Programming Installed', 'Extreme Programming Adventure in C#' 저자)
      - 중복을 줄여라.
      - 객체, 메서드는 한 가지 일만 한다.
      - 의미 있는 이름을 사용하라.
      - 일찍부터 추상화를 시켜서 프로젝트를 빠르게 진행시킬 수 있게 하라.
    - 워드 커닝햄(Wiki 창시자, Fit 창시자, 익스트림 프로그래밍 공동 창시자, 디자인 패턴을 뒤에서 움직이는 전문가, 스몰토크와 객체 지향의 정신적 지도자, 코드를 사랑하는 프로그래머들의 대부)
      - 읽고, 끄덕이고, 다음으로 넘어갈 수 있는 코드를 작성하라.
      - 코드를 아름답게 하는 것은 언어가 아니라, 프로그래머이다.
## 우리는 저자다
Javadoc에서 @author 필드는 저자를 소개한다. 우리는 작가들이다. 작가에게는 독자가 있다. 저자는 독자와 잘 소통할 책임도 있다. 다음에 코드를 작성할 일이 있다면, 당신은 당신의 노력을 평가할 독자를 위해 글을 쓰는 작가임을 명심하라.

어쩌면 코드를 읽는 시간보다 작성하는 데에 더 많은 시간이 필요하다고 생각할지 모른다. 하지만 실상은 반대다.
```
밥이 모듈을 입력한다.
변경할 함수로 스크롤해 내려간다.
잠시 멈추고 생각한다.
이런! 모듈 상단으로 스크롤해 변수 초기화를 확인한다.
다시 내려와 입력하기 시작한다.
이런, 입력을 지운다!
다시 입력한다.
다시 지운다!
뭔가를 절반쯤 입력하다가 또 지운다!
지금 바꾸려는 함수를 호출하는 함수로 스크롤한 후 함수가 호출되는 방식을 살펴본다.
다시 돌아와 방금 지운 코드를 입력한다.
잠시 멈춘다.
코드를 다시 지운다!
다른 윈도를 열어 하위 클래스를 살핀다. 함수가 재정의되었는가?
...
```
실제로 코드를 읽는 시간 대 코드를 짜는 시간 비율이 10:1을 넘는다. 새 코드를 짜려면 예전의, 주변의 코드를 읽어야하기 때문이다.
그러므로 **빨리 짜고 쉽다면, 읽기 쉽게 만들어라.**
## 보이스카우트 규칙
> "Leave the campground cleaner than you found it."

잘 짠 코드가 전부가 아니다. 시간이 지나도 언제나 깨끗하게 유지해야 한다.
